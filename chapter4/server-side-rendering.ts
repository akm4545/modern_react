{
    // 싱글 페이지 애플리케이션(Single Page Application: SPA) 
    // 렌더링과 라우팅에 필요한 대부분의 기능을 서버가 아닌 브라우저 자바스크립트에 의존하는 방식
    // 최초의 첫 페이지에서 데이터를 모두 불러온 이후에는 페이지 전환을 위한 모든 작업이 자바스크립트와 브라우저의 history.pushState와
    // history.replaceState로 이뤄지기 때문에 페이지를 불러온 이후에는 서버에서 HTML을 내려받지 않고 하나의 페이지에서 모든 작업을 처리한다
    // 이러한 작동 방식은 최초에 로딩해야 할 자바스크립트 리소스가 커지는 단점이 있지만 한번 로딩된 이후에는 서버를 거쳐 필요한
    // 리소스를 받아올 일이 적어지기 때문에 사용자에게 훌륭한 UI/UX를 제공한다는 장점이 있다
}

{
    // 전통적인 방식의 애플리케이션
    // 과거 서버 사이드에서 작동하던 방식은 페이지 전환이 발생할 때마다 새롭게 페이지를 요청하고 HTML페이지를 다운로드해 파싱하는 작업을 거친다
    // 이 과정은 페이지를 처음부터 새로 그려야 해서 일부 사용자는 페이지가 전환될 때 부자연스러운 모습을 보게 된다
}

{
    // 싱글 페에지 렌더링 방식의 유행과 JAM 스택
    // 싱글 페이지 애플리케이션 즉 클라이언트 사이드 라우팅이 널리 퍼지게 된 것은 단순히 사용자에게 좀 더 멋진 UX를 제공하는 것 뿐만이 아니다
    // PHP 시정 웹 애플리케이션을 만들기 위해서는 자바스크립트 외에 신경 쓸 것이 많았지만 싱글 페이지 애플리케이션에서는 단지 부라우저 
    // 내부에서 작동하는 자바스크립트만 잘 작성하면 문제없다
    // 즉 프론트엔드 개발자들에게 좀 더 간편한 개발 경험을 제공했고 더욱 간편하게 웹 애플리케이션을 만들 수 있다는 장점이 있다

    // 기존의 웹 개발은 LAMP 스택 (Linux/운영체제, Apache/서버, MySQL/데이터베이스, PHP/Python/웹 프레임워크)로 구성돼 있었다
    // 자바스크립트에서 할 수 있는 일이 제한적이었기 떄문에 대부분의 처리를 서버에서 해야만 했다
    // 이런 서버 의존적인 문제는 웹 애플리케이션의 확장성에도 걸림돌로 작용했는데 
    // 웹 애플리케이션의 기능이 다양해지거나 사용자가 늘어나면 이와 동시에 서버도 확장해야 했지만 당시 클라우드의 개념이 부족하여 서버 확장이 매우 번거로웠다

    // 다양한 자바스크립트 프레임워크의 등장으로 등장한것이 바로 JAM(JavaScript, API, Markup) 스택이다
    // 대부분의 작업을 자바스크립트에서 수행할 수 있었기 때문에 프론트엔드는 자바스크립트와 마크업(HTML, CSS)을 미리 빌드하여 정적으로 제공하면 
    // 이후 작동은 클라이언트에서 실행되므로 서버 확장성 문제에서 좀 더 자유로워질 수 있게 됐다
    // 이러한 JAM스택의 인기와 Node.js의 고도화에 힘입어 MEAN(MongoDB, Express.js, AngularJS, Node.js)이나
    // MERN(MongoDB, Express.js, React, Node.js) 스택처럼 아예 API 서버 자체도 자바스크립트로 구현하는 구조가 인기를 끄기 시작했다
}