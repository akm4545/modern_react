{
    // 백엔드 테스트
    // 서버나 데이터베이스에서 원하는 데이터를 올바르게 가져올 수 있는지
    // 데이터 수정 간 교착 상태나 경쟁 상태가 발생하지 않는지
    // 데이터 손실은 없는지
    // 특정 상황에서 장애 발생 여부를 확인하는 과정이 주를 이룸
    // 일반적으로 화이트박스 테스트로 작성한 코드가 의도대도 작동하는지 확인해야 하며 이는 GUI가 아닌 AUI에서 주로 수행
    // 어느정도 백엔드에 대한 이해가 있는 사람만 가능

    // 프론트엔드 테스트
    // 일반적인 사용자와 동일하게 유사한 환경에서 수행
    // 사용자가 프로그램에서 수행할 주요 비즈니스 로직이나 모든 경우의 수를 고려 
    // 과정에서 사용잔ㄴ 굳이 프론트엔드 코드를 알 필요는 없다
    // 블랙박스 형태로 테스트가 이뤄지며 의도대로 작동하는지를 확인하는데 초점

    // 프론트엔드 개발은 디자인 요소뿐만 아니라 사용자의 인터랙션, 의도치 않은 작동 등 브라우저에서 발생할 수 있는 다양한
    // 시나리오를 고려해야 하기 때문에 일반적으로 테스팅하기가 매우 번거롭고 손이 많이 가는 작업
}

{
    // React Testing Library
    // DOM Testing Library를 기반으로 만들어진 테스팅 라이브러리
    // 리액트를 기반으로 한 테스트를 수행하기 위해 만들어짐

    // DOM Testing Library
    // jsdom을 기반으로 하고 있다
    // jsdom 
    // 순수하게 자바스크립트로 작성된 라이브러리
    // HTML이 없는 자바스크립트만 존재하는 환경 (Node.js) 같은 환경에서 HTML과 DOM을 사용할 수 있도록 해주는 라이브러리
    // jsdom을 사용하면 자바스크립트 환경에서도 HTML을 사용할 수 있으므로 이를 기반으로 DOM Testing Library에서 제공하는 API를 사용해
    // 테스트 수행 가능

    // jsdom을 사용해 DOM 조작
    // HTML이 있는것처럼 DOM을 불러오고 조작 가능
    const jsdom = require('jsdom')

    const { JSDOM } = jsdom
    const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</P>`)

    console.log(dom.window.document.querySelector('p').textContent) // "Hello world"

    // DOM Testing Library를 활용한 React Testing Library를 사용하여 실제 컴포넌트를 렌더링하지 않고도 원하는 대로 렌더링되고 있는지 확인 가능
    // 굳이 테스트 환경을 구축하는 데 복잡한 과정을 거치지 않아 간편하고 테스트 소요 시간도 단축시킬 수 있다
    // 컴포넌트뿐만 아니라 Provider, 훅 등 리액트를 구성하는 다양한 요소들을 테스트 가능
}

{
    
}